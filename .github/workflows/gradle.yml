# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up secret Key - main
        shell: bash
        env:
#          SECRETS_DB_Test: ${{secrets.MYSQL_MAIN}}
          YML_SETTING: ${{secrets.YML_SETTING_V2}}
          SECRET_AWS_S3: ${{secrets.AWS_S3}}
          SECRET_AWS_S3_CREDENTIALS: ${{secrets.AWS_S3_CREDENTAILS}}
          SECRET_AZURE_KEY: ${{secrets.AZURE_KEY}}

        run: |
          touch src/main/resources/application.yml
          echo $YML_SETTING > main_enc.txt
          cat main_enc.txt | base64 -d > src/main/resources/application.yml
          
          touch src/main/resources/application-aws.yml
          echo $SECRET_AWS_S3 > aws_enc.txt
          cat aws_enc.txt | base64 -d > src/main/resources/application-aws.yml
          
          touch src/main/resources/application-credentials.yml
          echo $SECRET_AWS_S3_CREDENTIALS > credentials_enc.txt
          cat credentials_enc.txt | base64 -d > src/main/resources/application-credentials.yml
          
          touch src/main/resources/application-azure.yml
          echo $SECRET_AZURE_KEY > azure_enc.txt
          cat azure_enc.txt | base64 -d > src/main/resources/application-azure.yml

      - name: Set up secret Key - test
        shell: bash
        env:
          SECRETS_DB_Test: ${{secrets.MYSQL_TEST}}
          YML_SETTING: ${{secrets.YML_SETTING_TEST}}
          SECRET_AWS_S3: ${{secrets.AWS_S3}}
          SECRET_AWS_S3_CREDENTIALS: ${{secrets.AWS_S3_CREDENTAILS}}
          SECRET_AZURE_KEY: ${{secrets.AZURE_KEY}}
        run: |
          mkdir src/test/resources -p
          touch src/test/resources/application.yml
          echo $YML_SETTING > test_enc.txt
          cat test_enc.txt | base64 -d > src/test/resources/application.yml
          
          touch src/test/resources/application-aws.yml
          echo $SECRET_AWS_S3 > test_aws_enc.txt
          cat test_aws_enc.txt | base64 -d > src/test/resources/application-aws.yml
          
          touch src/test/resources/application-credentials.yml
          echo $SECRET_AWS_S3_CREDENTIALS > test_credentials_enc.txt
          cat test_credentials_enc.txt | base64 -d > src/test/resources/application-credentials.yml
          
          touch src/test/resources/application-azure.yml
          echo $SECRET_AZURE_KEY > test_azure_enc.txt
          cat test_azure_enc.txt | base64 -d > src/test/resources/application-azure.yml

      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          character set server: 'utf8'
          mysql database: 'koonsdiary'
          mysql user: 'koonda'
          mysql password: ${{ secrets.MYSQL_PASSWORD }}

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Test with Gradle
        run: ./gradlew test

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # jar 파일 카피
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp ./appspec.yml ./deploy/

      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # 압축 파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./KoonsDiary-Spring.zip ./deploy

      # S3 버킷을 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./KoonsDiary-Spring.zip s3://koonsdiary/

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name koonsdiary \
          --deployment-group-name koonsdiary-test \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=koonsdiary,bundleType=zip,key=KoonsDiary-Spring.zip \
          --region ap-northeast-2